{"version":3,"sources":["components/ColumnFilter.js","components/columns.js","components/BasicTable.js","components/Checkbox.js","components/ColumnHiding.js","components/ColumnOrder.js","components/GlobalFilter.js","components/FilteringTable.js","components/PaginationTable.js","components/RowSelection.js","components/SortingTable.js","components/TableStyles.js","components/StickyTable.js","App.js","reportWebVitals.js","index.js"],"names":["ColumnFilter","column","filterValue","setFilter","value","onChange","e","target","COLUMNS","Header","Footer","accessor","disableFilters","sticky","Cell","format","Date","BasicTable","columns","useMemo","data","MOCK_DATA","useTable","getTableProps","getTableBodyProps","headerGroups","footerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","footerGroup","getFooterGroupProps","getFooterProps","Checkbox","React","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","type","ColumnHiding","allColumns","getToggleHideAllColumnsProps","getToggleHiddenProps","id","ColumnOrder","useColumnOrder","setColumnOrder","onClick","GlobalFilter","filter","useState","setValue","useAsyncDebounce","undefined","FilteringTable","defaultColumn","Filter","useFilters","useGlobalFilter","state","setGlobalFilter","globalFilter","canFilter","PaginationTable","initialState","pageIndex","usePagination","page","nextPage","previousPage","canNextPage","canPreviousPage","pageOptions","gotoPage","pageCount","setPageSize","pageSize","length","defaultValue","pageNumber","Number","style","width","disabled","RowSelection","useRowSelect","hooks","visibleColumns","push","getToggleAllRowsSelectedProps","getToggleRowSelectedProps","selectedFlatRows","firstPageRows","slice","JSON","stringify","original","SortingTable","useSortBy","getSortByToggleProps","isSorted","isSortedDesc","Styles","styled","div","StickyTable","useBlockLayout","useSticky","className","height","App","DIV","to","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44306659.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const ColumnFilter = ({ column }) => {\r\n  const { filterValue, setFilter } = column;\r\n\r\n  return (\r\n    <span>\r\n      Search :{\" \"}\r\n      <input\r\n        value={filterValue || \"\"}\r\n        onChange={(e) => setFilter(e.target.value)}\r\n      />\r\n    </span>\r\n  );\r\n};\r\n","import { format } from \"date-fns\";\r\nimport { ColumnFilter } from \"./ColumnFilter\";\r\n\r\nexport const COLUMNS = [\r\n  {\r\n    Header: \"ID\",\r\n    Footer: \"ID\",\r\n    accessor: \"id\",\r\n    /* Filter: ColumnFilter, */\r\n    disableFilters: true,\r\n    sticky: \"left\",\r\n  },\r\n  {\r\n    Header: \"First Name\",\r\n    Footer: \"First Name\",\r\n    accessor: \"first_name\",\r\n    sticky: \"left\",\r\n  },\r\n  {\r\n    Header: \"Last Name\",\r\n    Footer: \"Last Name\",\r\n    accessor: \"last_name\",\r\n    sticky: \"left\",\r\n  },\r\n  {\r\n    Header: \"Date of Birth\",\r\n    Footer: \"Date of Birth\",\r\n    accessor: \"date_of_birth\",\r\n    Cell: ({ value }) => {\r\n      return format(new Date(value), \"dd/MMM/yyyy\");\r\n    },\r\n  },\r\n  {\r\n    Header: \"Country\",\r\n    Footer: \"Country\",\r\n    accessor: \"country\",\r\n  },\r\n  {\r\n    Header: \"Phone\",\r\n    Footer: \"Phone\",\r\n    accessor: \"phone\",\r\n  },\r\n  {\r\n    Header: \"Email\",\r\n    Footer: \"Email\",\r\n    accessor: \"email\",\r\n  },\r\n  {\r\n    Header: \"Age\",\r\n    Footer: \"Age\",\r\n    accessor: \"age\",\r\n  },\r\n];\r\n\r\nexport const GROUPED_COLUMNS = [\r\n  { Header: \"ID\", Footer: \"ID\", accessor: \"id\" },\r\n  {\r\n    Header: \"Name\",\r\n    Footer: \"Name\",\r\n    columns: [\r\n      {\r\n        Header: \"First Name\",\r\n        Footer: \"First Name\",\r\n        accessor: \"first_name\",\r\n      },\r\n      {\r\n        Header: \"Last Name\",\r\n        Footer: \"Last Name\",\r\n        accessor: \"last_name\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    Header: \"Info\",\r\n    Footer: \"Info\",\r\n    columns: [\r\n      {\r\n        Header: \"Date of Birth\",\r\n        Footer: \"Date of Birth\",\r\n        accessor: \"date_of_birth\",\r\n      },\r\n      {\r\n        Header: \"Country\",\r\n        Footer: \"Country\",\r\n        accessor: \"country\",\r\n      },\r\n      {\r\n        Header: \"Phone\",\r\n        Footer: \"Phone\",\r\n        accessor: \"phone\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n","import React, { useMemo } from \"react\";\r\nimport { useTable } from \"react-table\";\r\nimport MOCK_DATA from \"./MOCK_DATA.json\";\r\nimport { COLUMNS, GROUPED_COLUMNS } from \"./columns\";\r\nimport \"./table.css\";\r\n\r\nexport const BasicTable = () => {\r\n  const columns = useMemo(() => COLUMNS, []); // useMemo ensures data isn't recreated on every re-render\r\n  //const columns = useMemo(() => GROUPED_COLUMNS, []); // useMemo ensures data isn't recreated on every re-render\r\n  const data = useMemo(() => MOCK_DATA, []);\r\n\r\n  /* const tableInstance = useTable({\r\n    columns: columns,\r\n    data: data,\r\n  }); */\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    footerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({ columns, data });\r\n\r\n  return (\r\n    <table {...getTableProps()}>\r\n      <thead>\r\n        {headerGroups.map((headerGroup) => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map((column) => (\r\n              <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {rows.map((row) => {\r\n          prepareRow(row);\r\n          return (\r\n            <tr {...row.getRowProps()}>\r\n              {row.cells.map((cell) => {\r\n                return <td {...cell.getCellProps}>{cell.render(\"Cell\")}</td>;\r\n              })}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n      <tfoot>\r\n        {footerGroups.map((footerGroup) => (\r\n          <tr {...footerGroup.getFooterGroupProps()}>\r\n            {footerGroup.headers.map((column) => (\r\n              <td {...column.getFooterProps()}>{column.render(\"Footer\")}</td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tfoot>\r\n    </table>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Checkbox = React.forwardRef(({ indeterminate, ...rest }, ref) => {\r\n  const defaultRef = React.useRef();\r\n  const resolvedRef = ref || defaultRef;\r\n\r\n  React.useEffect(() => {\r\n    resolvedRef.current.indeterminate = indeterminate;\r\n  }, [resolvedRef, indeterminate]);\r\n\r\n  return (\r\n    <>\r\n      <input type=\"checkbox\" ref={resolvedRef} {...rest} />\r\n    </>\r\n  );\r\n});\r\n","import React, { useMemo } from \"react\";\r\nimport { useTable } from \"react-table\";\r\nimport MOCK_DATA from \"./MOCK_DATA.json\";\r\nimport { COLUMNS, GROUPED_COLUMNS } from \"./columns\";\r\nimport \"./table.css\";\r\nimport { Checkbox } from \"./Checkbox\";\r\n\r\nexport const ColumnHiding = () => {\r\n  const columns = useMemo(() => COLUMNS, []); // useMemo ensures data isn't recreated on every re-render\r\n  //const columns = useMemo(() => GROUPED_COLUMNS, []); // useMemo ensures data isn't recreated on every re-render\r\n  const data = useMemo(() => MOCK_DATA, []);\r\n\r\n  /* const tableInstance = useTable({\r\n    columns: columns,\r\n    data: data,\r\n  }); */\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    footerGroups,\r\n    rows,\r\n    prepareRow,\r\n    allColumns,\r\n    getToggleHideAllColumnsProps,\r\n  } = useTable({ columns, data });\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div>\r\n          <Checkbox {...getToggleHideAllColumnsProps()} />\r\n          Toggle All\r\n        </div>\r\n        <div>\r\n          {allColumns.map((column) => (\r\n            <div key={column.id}>\r\n              <label>\r\n                <input type=\"checkbox\" {...column.getToggleHiddenProps()} />\r\n                {column.Header}\r\n              </label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return <td {...cell.getCellProps}>{cell.render(\"Cell\")}</td>;\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n        <tfoot>\r\n          {footerGroups.map((footerGroup) => (\r\n            <tr {...footerGroup.getFooterGroupProps()}>\r\n              {footerGroup.headers.map((column) => (\r\n                <td {...column.getFooterProps()}>{column.render(\"Footer\")}</td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tfoot>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n","import React, { useMemo } from \"react\";\r\nimport { useTable, useColumnOrder } from \"react-table\";\r\nimport MOCK_DATA from \"./MOCK_DATA.json\";\r\nimport { COLUMNS, GROUPED_COLUMNS } from \"./columns\";\r\nimport \"./table.css\";\r\n\r\nexport const ColumnOrder = () => {\r\n  const columns = useMemo(() => COLUMNS, []); // useMemo ensures data isn't recreated on every re-render\r\n  //const columns = useMemo(() => GROUPED_COLUMNS, []); // useMemo ensures data isn't recreated on every re-render\r\n  const data = useMemo(() => MOCK_DATA, []);\r\n\r\n  /* const tableInstance = useTable({\r\n    columns: columns,\r\n    data: data,\r\n  }); */\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    footerGroups,\r\n    rows,\r\n    prepareRow,\r\n    setColumnOrder,\r\n  } = useTable({ columns, data }, useColumnOrder);\r\n\r\n  const changeOrder = () => {\r\n    setColumnOrder([\r\n      \"id\",\r\n      \"first_name\",\r\n      \"last_name\",\r\n      \"phone\",\r\n      \"country\",\r\n      \"date_of_birth\",\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button onClick={changeOrder}>Change Column Order</button>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return <td {...cell.getCellProps}>{cell.render(\"Cell\")}</td>;\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n        <tfoot>\r\n          {footerGroups.map((footerGroup) => (\r\n            <tr {...footerGroup.getFooterGroupProps()}>\r\n              {footerGroup.headers.map((column) => (\r\n                <td {...column.getFooterProps()}>{column.render(\"Footer\")}</td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tfoot>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useAsyncDebounce } from \"react-table\";\r\n\r\n//with debouncing\r\nexport const GlobalFilter = ({ filter, setFilter }) => {\r\n  const [value, setValue] = useState(filter);\r\n\r\n  const onChange = useAsyncDebounce((value) => {\r\n    setFilter(value || undefined);\r\n  }, 1000);\r\n\r\n  return (\r\n    <span>\r\n      Search :{\" \"}\r\n      <input\r\n        value={value || \"\"}\r\n        onChange={(e) => {\r\n          setValue(e.target.value);\r\n          onChange(e.target.value);\r\n        }}\r\n      />\r\n    </span>\r\n  );\r\n};\r\n\r\n//without debouncing\r\n/* export const GlobalFilter = ({ filter, setFilter }) => {\r\n  return (\r\n    <span>\r\n      Search :{\" \"}\r\n      <input value={filter || \"\"} onChange={(e) => setFilter(e.target.value)} />\r\n    </span>\r\n  );\r\n}; */\r\n","import React, { useMemo } from \"react\";\r\nimport { useTable, useGlobalFilter, useFilters } from \"react-table\";\r\nimport MOCK_DATA from \"./MOCK_DATA.json\";\r\nimport { COLUMNS, GROUPED_COLUMNS } from \"./columns\";\r\nimport \"./table.css\";\r\nimport { GlobalFilter } from \"./GlobalFilter\";\r\nimport { ColumnFilter } from \"./ColumnFilter\";\r\n\r\nexport const FilteringTable = () => {\r\n  const columns = useMemo(() => COLUMNS, []); // useMemo ensures data isn't recreated on every re-render\r\n  //const columns = useMemo(() => GROUPED_COLUMNS, []); // useMemo ensures data isn't recreated on every re-render\r\n  const data = useMemo(() => MOCK_DATA, []);\r\n\r\n  const defaultColumn = useMemo(() => {\r\n    return {\r\n      Filter: ColumnFilter,\r\n    };\r\n  }, []);\r\n\r\n  /* const tableInstance = useTable({\r\n    columns: columns,\r\n    data: data,\r\n  }); */\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    footerGroups,\r\n    rows,\r\n    prepareRow,\r\n    state,\r\n    setGlobalFilter,\r\n  } = useTable({ columns, data, defaultColumn }, useFilters, useGlobalFilter);\r\n\r\n  const { globalFilter } = state;\r\n\r\n  return (\r\n    <>\r\n      <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} />\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps()}>\r\n                  {column.render(\"Header\")}\r\n                  <div>{column.canFilter ? column.render(\"Filter\") : null}</div>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return <td {...cell.getCellProps}>{cell.render(\"Cell\")}</td>;\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n        <tfoot>\r\n          {footerGroups.map((footerGroup) => (\r\n            <tr {...footerGroup.getFooterGroupProps()}>\r\n              {footerGroup.headers.map((column) => (\r\n                <td {...column.getFooterProps()}>{column.render(\"Footer\")}</td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tfoot>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n","import React, { useMemo } from \"react\";\r\nimport { useTable, usePagination } from \"react-table\";\r\nimport MOCK_DATA from \"./MOCK_DATA.json\";\r\nimport { COLUMNS, GROUPED_COLUMNS } from \"./columns\";\r\nimport \"./table.css\";\r\n\r\nexport const PaginationTable = () => {\r\n  const columns = useMemo(() => COLUMNS, []); // useMemo ensures data isn't recreated on every re-render\r\n  //const columns = useMemo(() => GROUPED_COLUMNS, []); // useMemo ensures data isn't recreated on every re-render\r\n  const data = useMemo(() => MOCK_DATA, []);\r\n\r\n  /* const tableInstance = useTable({\r\n    columns: columns,\r\n    data: data,\r\n  }); */\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    nextPage,\r\n    previousPage,\r\n    canNextPage,\r\n    canPreviousPage,\r\n    pageOptions,\r\n    state,\r\n    gotoPage,\r\n    pageCount,\r\n    setPageSize,\r\n    prepareRow,\r\n  } = useTable(\r\n    { columns, data, initialState: { pageIndex: 2 } },\r\n    usePagination\r\n  );\r\n\r\n  const { pageIndex, pageSize } = state;\r\n\r\n  return (\r\n    <>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return <td {...cell.getCellProps}>{cell.render(\"Cell\")}</td>;\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <div>\r\n        <span>\r\n          page{\" \"}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{\" \"}\r\n        </span>\r\n        <span>\r\n          Go to Page{\" \"}\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={(e) => {\r\n              const pageNumber = e.target.value\r\n                ? Number(e.target.value) - 1\r\n                : 0;\r\n              gotoPage(pageNumber);\r\n            }}\r\n            style={{ width: \"50px\" }}\r\n          />\r\n        </span>\r\n        <select\r\n          value={pageSize}\r\n          onChange={(e) => setPageSize(Number(e.target.value))}\r\n        >\r\n          {[10, 25, 50].map((pageSize) => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize} records\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {\"<<\"}\r\n        </button>\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          Previous\r\n        </button>\r\n        {\"   \"}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          Next\r\n        </button>\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {\">>\"}\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { useMemo } from \"react\";\r\nimport { useTable, useRowSelect } from \"react-table\";\r\nimport MOCK_DATA from \"./MOCK_DATA.json\";\r\nimport { COLUMNS } from \"./columns\";\r\nimport \"./table.css\";\r\nimport { Checkbox } from \"./Checkbox\";\r\n\r\nexport const RowSelection = () => {\r\n  const columns = useMemo(() => COLUMNS, []);\r\n  const data = useMemo(() => MOCK_DATA, []);\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    selectedFlatRows,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n    },\r\n    useRowSelect,\r\n    (hooks) => {\r\n      hooks.visibleColumns.push((columns) => [\r\n        {\r\n          id: \"selection\",\r\n          Header: ({ getToggleAllRowsSelectedProps }) => (\r\n            <Checkbox {...getToggleAllRowsSelectedProps()} />\r\n          ),\r\n          Cell: ({ row }) => <Checkbox {...row.getToggleRowSelectedProps()} />,\r\n        },\r\n        ...columns,\r\n      ]);\r\n    }\r\n  );\r\n\r\n  const firstPageRows = rows.slice(0, 10);\r\n\r\n  return (\r\n    <>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {firstPageRows.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <pre>\r\n        <code>\r\n          {JSON.stringify(\r\n            {\r\n              selectedFlatRows: selectedFlatRows.map((row) => row.original),\r\n            },\r\n            null,\r\n            2\r\n          )}\r\n        </code>\r\n      </pre>\r\n    </>\r\n  );\r\n};\r\n","import React, { useMemo } from \"react\";\r\nimport { useTable, useSortBy } from \"react-table\";\r\nimport MOCK_DATA from \"./MOCK_DATA.json\";\r\nimport { COLUMNS, GROUPED_COLUMNS } from \"./columns\";\r\nimport \"./table.css\";\r\n\r\nexport const SortingTable = () => {\r\n  const columns = useMemo(() => COLUMNS, []); // useMemo ensures data isn't recreated on every re-render\r\n  //const columns = useMemo(() => GROUPED_COLUMNS, []); // useMemo ensures data isn't recreated on every re-render\r\n  const data = useMemo(() => MOCK_DATA, []);\r\n\r\n  /* const tableInstance = useTable({\r\n    columns: columns,\r\n    data: data,\r\n  }); */\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    footerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({ columns, data }, useSortBy);\r\n\r\n  return (\r\n    <>\r\n      <span>Click on the below headers to sort accordingly.</span>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                  {column.render(\"Header\")}\r\n                  <span>\r\n                    {column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? \" (desc)\"\r\n                        : \" (asc)\"\r\n                      : \"\"}\r\n                  </span>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return <td {...cell.getCellProps}>{cell.render(\"Cell\")}</td>;\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n        <tfoot>\r\n          {footerGroups.map((footerGroup) => (\r\n            <tr {...footerGroup.getFooterGroupProps()}>\r\n              {footerGroup.headers.map((column) => (\r\n                <td {...column.getFooterProps()}>{column.render(\"Footer\")}</td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tfoot>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Styles = styled.div`\r\n  .table {\r\n    border: 1px solid #ddd;\r\n    .tr {\r\n      :last-child {\r\n        .td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n    .th,\r\n    .td {\r\n      padding: 5px;\r\n      border-bottom: 1px solid #ddd;\r\n      border-right: 1px solid #ddd;\r\n      background-color: #fff;\r\n      overflow: hidden;\r\n      :last-child {\r\n        border-right: 0;\r\n      }\r\n    }\r\n    &.sticky {\r\n      overflow: scroll;\r\n      .header,\r\n      .footer {\r\n        position: sticky;\r\n        z-index: 1;\r\n        width: fit-content;\r\n      }\r\n      .header {\r\n        top: 0;\r\n        box-shadow: 0px 3px 3px #ccc;\r\n      }\r\n      .footer {\r\n        bottom: 0;\r\n        box-shadow: 0px -3px 3px #ccc;\r\n      }\r\n      .body {\r\n        position: relative;\r\n        z-index: 0;\r\n      }\r\n      [data-sticky-td] {\r\n        position: sticky;\r\n      }\r\n      [data-sticky-last-left-td] {\r\n        box-shadow: 2px 0px 3px #ccc;\r\n      }\r\n      [data-sticky-first-right-td] {\r\n        box-shadow: -2px 0px 3px #ccc;\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useMemo } from \"react\";\r\nimport { useTable, useBlockLayout } from \"react-table\";\r\nimport { useSticky } from \"react-table-sticky\";\r\nimport { Styles } from \"./TableStyles\";\r\nimport MOCK_DATA from \"./MOCK_DATA.json\";\r\nimport { COLUMNS } from \"./columns\";\r\nimport \"./table.css\";\r\n\r\nexport const StickyTable = () => {\r\n  const columns = useMemo(() => COLUMNS, []);\r\n  const data = useMemo(() => MOCK_DATA, []);\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\r\n    useTable(\r\n      {\r\n        columns,\r\n        data,\r\n      },\r\n      useBlockLayout,\r\n      useSticky\r\n    );\r\n\r\n  const firstPageRows = rows.slice(0, 20);\r\n\r\n  return (\r\n    <Styles>\r\n      <div\r\n        {...getTableProps()}\r\n        className=\"table sticky\"\r\n        style={{ width: 1000, height: 500 }}\r\n      >\r\n        <div className=\"header\">\r\n          {headerGroups.map((headerGroup) => (\r\n            <div {...headerGroup.getHeaderGroupProps()} className=\"tr\">\r\n              {headerGroup.headers.map((column) => (\r\n                <div {...column.getHeaderProps()} className=\"th\">\r\n                  {column.render(\"Header\")}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div {...getTableBodyProps()} className=\"body\">\r\n          {firstPageRows.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <div {...row.getRowProps()} className=\"tr\">\r\n                {row.cells.map((cell) => (\r\n                  <div {...cell.getCellProps()} className=\"td\">\r\n                    {cell.render(\"Cell\")}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </Styles>\r\n  );\r\n};\r\n","import \"./App.css\";\nimport { BasicTable } from \"./components/BasicTable\";\nimport { ColumnHiding } from \"./components/ColumnHiding\";\nimport { ColumnOrder } from \"./components/ColumnOrder\";\nimport { FilteringTable } from \"./components/FilteringTable\";\nimport { PaginationTable } from \"./components/PaginationTable\";\nimport { RowSelection } from \"./components/RowSelection\";\nimport { SortingTable } from \"./components/SortingTable\";\nimport { StickyTable } from \"./components/StickyTable\";\nimport { BrowserRouter, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nfunction App() {\n  const DIV = styled.div`\n    padding: 8px;\n    margin: 10px;\n    color: red;\n    border: 2px solid gray;\n    text-align: center;\n    font-size: 50px;\n    background-color: yellow;\n  `;\n\n  return (\n    <>\n      <BrowserRouter>\n        <DIV>React Table Demo</DIV>\n        <hr></hr>\n        {\"  |  \"}\n        <Link to=\"/\">Basic Table</Link>\n        {\"  |  \"}\n        <Link to=\"/SortingTable\">SortingTable</Link>\n        {\"  |  \"}\n        <Link to=\"/FilteringTable\">FilteringTable</Link>\n        {\"  |  \"}\n        <Link to=\"/PaginationTable\">PaginationTable</Link>\n        {\"  |  \"}\n        <Link to=\"/RowSelection\">RowSelection</Link>\n        {\"  |  \"}\n        <Link to=\"/ColumnOrder\">ColumnOrder</Link>\n        {\"  |  \"}\n        <Link to=\"/ColumnHiding\">ColumnHiding</Link>\n        {\"  |  \"}\n        <Link to=\"/StickyTable\">StickyTable</Link>\n        {\"  |  \"}\n        <hr></hr>\n        <Route exact path=\"/\" component={BasicTable}></Route>\n        <Route exact path=\"/SortingTable\" component={SortingTable}></Route>\n        <Route exact path=\"/FilteringTable\" component={FilteringTable}></Route>\n        <Route\n          exact\n          path=\"/PaginationTable\"\n          component={PaginationTable}\n        ></Route>\n        <Route exact path=\"/RowSelection\" component={RowSelection}></Route>\n        <Route exact path=\"/ColumnOrder\" component={ColumnOrder}></Route>\n        <Route exact path=\"/ColumnHiding\" component={ColumnHiding}></Route>\n        <Route exact path=\"/StickyTable\" component={StickyTable}></Route>\n        {/* <BasicTable /> */}\n        {/* <SortingTable /> */}\n        {/* <FilteringTable /> */}\n        {/* <PaginationTable /> */}\n        {/* <RowSelection /> */}\n        {/* <RowSelection /> */}\n        {/* <ColumnOrder /> */}\n        {/* <ColumnHiding /> */}\n        {/* <StickyTable /> */}\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}